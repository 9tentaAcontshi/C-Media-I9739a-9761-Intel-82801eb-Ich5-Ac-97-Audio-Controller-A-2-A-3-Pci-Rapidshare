package io.xpipe.app.core.check;

import io.xpipe.app.comp.base.MarkdownComp;
import io.xpipe.app.core.*;
import io.xpipe.app.util.PlatformState;
import io.xpipe.app.util.WindowsRegistry;
import io.xpipe.core.process.OsType;
import javafx.geometry.Insets;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ButtonType;

import java.nio.file.Files;

public class AppMalwarebytesCheck {

    private static boolean detect() {
        var reg = WindowsRegistry.readString(WindowsRegistry.HKEY_LOCAL_MACHINE,"SOFTWARE\\Malwarebytes", "id");
        if (reg.isPresent()) {
            return true;
        }

        return false;
    }

    public static void check() throws Throwable {
        // Only show this on first launch on windows
        if (OsType.getLocal() != OsType.WINDOWS || AppCache.get("malwarebytesSeen", Boolean.class,() -> false)) {
            return;
        }

        var found = detect();
        if (!found) {
            return;
        }

        PlatformState.initPlatformOrThrow();
        AppStyle.init();
        AppImages.init();

        var a = AppWindowHelper.showBlockingAlert(alert -> {
            alert.setTitle(AppI18n.get("malwarebytesNoticeTitle"));
            alert.setAlertType(Alert.AlertType.NONE);
            AppResources.with(
                    AppResources.XPIPE_MODULE,
                    "misc/malwarebytes.md",
                    file -> {
                        var markdown = new MarkdownComp(Files.readString(file), s -> s).prefWidth(550).prefHeight(500).createRegion();
                        alert.getDialogPane().setContent(markdown);
                        alert.getDialogPane().setPadding(new Insets(15));
                    });

            alert.getButtonTypes().add(new ButtonType(AppI18n.get("gotIt"), ButtonBar.ButtonData.OK_DONE));
        });
        a.filter(b -> b.getButtonData().isDefaultButton())
                .ifPresentOrElse(buttonType -> {}, () -> AppCache.update("malwarebytesSeen", true));
    }
}
